// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse.Server.Data;

#nullable disable

namespace Warehouse.Server.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    [Migration("20250805143946_DocumentsDateChange")]
    partial class DocumentsDateChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Warehouse.Server.Models.Balance", b =>
                {
                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MeasureUnitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("ResourceId", "MeasureUnitId");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("Warehouse.Server.Models.Client", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Warehouse.Server.Models.MeasureUnit", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("Warehouse.Server.Models.ReceiveDocument", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("ReceiveDocuments");
                });

            modelBuilder.Entity("Warehouse.Server.Models.ReceiveResource", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MeasureUnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Guid");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ReceiveResources");
                });

            modelBuilder.Entity("Warehouse.Server.Models.Resource", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Warehouse.Server.Models.SendDocument", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.HasIndex("ClientId");

                    b.ToTable("SendDocuments");
                });

            modelBuilder.Entity("Warehouse.Server.Models.SendResource", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MeasureUnitId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Guid");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("ResourceId");

                    b.ToTable("SendResources");
                });

            modelBuilder.Entity("Warehouse.Server.Models.Balance", b =>
                {
                    b.HasOne("Warehouse.Server.Models.MeasureUnit", "MeasureUnit")
                        .WithMany("Balances")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Server.Models.Resource", "Resource")
                        .WithMany("Balances")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasureUnit");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Warehouse.Server.Models.ReceiveResource", b =>
                {
                    b.HasOne("Warehouse.Server.Models.ReceiveDocument", "Document")
                        .WithMany("Resources")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Server.Models.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Server.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("MeasureUnit");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Warehouse.Server.Models.SendDocument", b =>
                {
                    b.HasOne("Warehouse.Server.Models.Client", "Client")
                        .WithMany("SendDocuments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Warehouse.Server.Models.SendResource", b =>
                {
                    b.HasOne("Warehouse.Server.Models.SendDocument", "Document")
                        .WithMany("Resources")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Server.Models.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Server.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("MeasureUnit");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Warehouse.Server.Models.Client", b =>
                {
                    b.Navigation("SendDocuments");
                });

            modelBuilder.Entity("Warehouse.Server.Models.MeasureUnit", b =>
                {
                    b.Navigation("Balances");
                });

            modelBuilder.Entity("Warehouse.Server.Models.ReceiveDocument", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Warehouse.Server.Models.Resource", b =>
                {
                    b.Navigation("Balances");
                });

            modelBuilder.Entity("Warehouse.Server.Models.SendDocument", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}
